// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id          String          @id @map("_id")
  username    String          @unique
  avatar      String?
  cover       String?
  firstname   String?
  lastname    String?
  description String?
  city        String?
  school      String?
  work        String?
  website     String?
  createdAt   DateTime        @default(now())
  posts       Post[]
  likes       Like[]
  comments    Comment[]
  followers   Follow[]        @relation("UserFollowers")
  following   Follow[]        @relation("UserFollowing")
  sender      FollowRequest[] @relation("RequestSender")
  receiver    FollowRequest[] @relation("RequestReceiver")
  blocker     Block[]         @relation("Blocker")
  blocked     Block[]         @relation("Blocked")
  stories     Stories[]
}

model Post {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  desc      String
  image     String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  likes     Like[]
  Comment   Comment[]
}

model Like {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  post      Post?    @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    String?  @db.ObjectId
  Comment   Comment? @relation(fields: [commentId], references: [id], onDelete: Cascade)
  commentId String?
}

model Comment {
  id        String   @id @map("_id")
  desc      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    String   @db.ObjectId
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  likes     Like[]
}

model Follow {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt   DateTime @default(now())
  follower    User     @relation("UserFollowers", fields: [followerId], references: [id], onDelete: Cascade)
  followerId  String
  following   User     @relation("UserFollowing", fields: [followingId], references: [id], onDelete: Cascade)
  followingId String
}

model FollowRequest {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt  DateTime @default(now())
  sender     User     @relation("RequestSender", fields: [senderId], references: [id], onDelete: Cascade)
  senderId   String   @unique
  receiver   User     @relation("RequestReceiver", fields: [receiverId], references: [id], onDelete: Cascade)
  receiverId String   @unique

  @@unique([senderId, receiverId])
}

model Block {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  blocker   User     @relation("Blocker", fields: [blockerId], references: [id], onDelete: Cascade)
  blockerId String   @unique
  blocked   User     @relation("Blocked", fields: [blockedId], references: [id], onDelete: Cascade)
  blockedId String   @unique

  @@unique([blockerId, blockedId])
}

model Stories {
  id        String   @id @map("_id")
  createdAt DateTime @default(now())
  expiresAt DateTime
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String   @unique
  image     String
}
